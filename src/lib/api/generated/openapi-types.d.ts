/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * System health check
         * @description Returns comprehensive system health status including database, Redis, and queue health
         */
        get: operations["getHealth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health/ready": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Readiness probe
         * @description Kubernetes-style readiness check - returns 200 only if all critical systems are ready
         */
        get: operations["getReadiness"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Prometheus metrics
         * @description Exposes Prometheus-formatted metrics for monitoring
         */
        get: operations["getMetrics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/queue/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Queue system health
         * @description Returns detailed queue system status including job counts and Redis connectivity
         */
        get: operations["getQueueHealth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/install": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Shopify OAuth installation
         * @description Initiates Shopify OAuth flow for app installation
         */
        get: operations["installApp"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Shopify OAuth callback
         * @description Handles Shopify OAuth callback and completes app installation
         */
        get: operations["handleOAuthCallback"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List campaigns
         * @description Retrieve paginated list of campaigns for the authenticated shop
         */
        get: operations["listCampaigns"];
        put?: never;
        /**
         * Create campaign
         * @description Create a new SMS campaign
         */
        post: operations["createCampaign"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get campaign
         * @description Retrieve a specific campaign by ID
         */
        get: operations["getCampaign"];
        /**
         * Update campaign
         * @description Update an existing campaign
         */
        put: operations["updateCampaign"];
        post?: never;
        /**
         * Delete campaign
         * @description Delete a campaign (only if not sent)
         */
        delete: operations["deleteCampaign"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/{id}/estimate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Estimate campaign
         * @description Estimate campaign recipients and cost before sending
         */
        post: operations["estimateCampaign"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/{id}/test": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Test send campaign
         * @description Send test SMS to a specific phone number
         */
        post: operations["testSendCampaign"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/{id}/send": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send campaign
         * @description Start sending a campaign to its audience
         */
        post: operations["sendCampaign"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/discounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List discounts
         * @description Retrieve paginated list of discount codes
         */
        get: operations["listDiscounts"];
        put?: never;
        /**
         * Create discount
         * @description Create a new discount code in Shopify
         */
        post: operations["createDiscount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/discounts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get discount
         * @description Retrieve a specific discount by ID
         */
        get: operations["getDiscount"];
        /**
         * Update discount
         * @description Update an existing discount
         */
        put: operations["updateDiscount"];
        post?: never;
        /**
         * Delete discount
         * @description Delete a discount code
         */
        delete: operations["deleteDiscount"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/discounts/conflicts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Check discount conflicts
         * @description Check for potential conflicts with existing discount codes
         */
        post: operations["checkDiscountConflicts"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/discounts/sync-from-shopify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sync discounts from Shopify
         * @description Import metadata of existing discounts from Shopify Admin API
         */
        post: operations["syncDiscountsFromShopify"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/discounts/{id}/pool/import": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Import discount codes to pool
         * @description Create DiscountCode entries from provided codes
         */
        post: operations["importDiscountCodes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/discounts/{id}/pool/generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate discount codes
         * @description Create discount codes via Shopify API and save to pool
         */
        post: operations["generateDiscountCodes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/discounts/{id}/pool/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get pool status
         * @description Get discount code pool statistics
         */
        get: operations["getPoolStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/discounts/{id}/pool/reserve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reserve discount codes
         * @description Reserve N unique codes for a campaign
         */
        post: operations["reserveDiscountCodes"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/discounts/{id}/pool/reservations/{reservationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete reservation
         * @description Cancel a discount code reservation
         */
        delete: operations["deleteReservation"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/{id}/prepare": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Prepare campaign
         * @description Pre-assign discount codes and prebuild shortlinks
         */
        post: operations["prepareCampaign"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/templates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List templates
         * @description Retrieve SMS templates for the shop
         */
        get: operations["listTemplates"];
        put?: never;
        /**
         * Create template
         * @description Create a new SMS template
         */
        post: operations["createTemplate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/templates/preview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Preview template
         * @description Preview how a template will render with sample data
         */
        post: operations["previewTemplate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/templates/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate template
         * @description Validate template syntax and required variables
         */
        post: operations["validateTemplate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/templates/variables/{trigger}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get template variables
         * @description Get available variables for a specific trigger type
         */
        get: operations["getTemplateVariables"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/segments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List segments
         * @description Retrieve customer segments
         */
        get: operations["listSegments"];
        put?: never;
        /**
         * Create segment
         * @description Create a new customer segment
         */
        post: operations["createSegment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/segments/preview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Preview segment
         * @description Preview segment filter and get estimated count
         */
        post: operations["previewSegment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports/overview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Overview report
         * @description Get high-level analytics overview
         */
        get: operations["getOverviewReport"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports/messaging": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Messaging report
         * @description Get detailed messaging analytics
         */
        get: operations["getMessagingReport"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get shop settings
         * @description Retrieve shop configuration and automation settings
         */
        get: operations["getSettings"];
        /**
         * Update shop settings
         * @description Update shop configuration and automation settings
         */
        put: operations["updateSettings"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks/shopify/orders/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Shopify orders/create webhook
         * @description Handle Shopify order creation webhook
         */
        post: operations["handleOrdersCreate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks/shopify/orders/paid": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Shopify orders/paid webhook
         * @description Handle Shopify order payment webhook
         */
        post: operations["handleOrdersPaid"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks/shopify/checkouts/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Shopify checkouts/create webhook
         * @description Handle Shopify checkout creation webhook
         */
        post: operations["handleCheckoutsCreate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks/shopify/checkouts/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Shopify checkouts/update webhook
         * @description Handle Shopify checkout update webhook (abandoned checkout detection)
         */
        post: operations["handleCheckoutsUpdate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks/mitto/dlr": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Mitto DLR webhook
         * @description Handle Mitto delivery receipt webhook
         */
        post: operations["handleMittoDLR"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks/mitto/inbound": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Mitto inbound webhook
         * @description Handle Mitto inbound SMS webhook
         */
        post: operations["handleMittoInbound"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/public/unsubscribe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Public unsubscribe
         * @description Handle public unsubscribe requests from App Proxy
         */
        post: operations["publicUnsubscribe"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/public/back-in-stock": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Back in stock notification
         * @description Handle back in stock notification requests from App Proxy
         */
        post: operations["publicBackInStock"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export interface webhooks {
    shopify_orders_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Shopify orders/create webhook
         * @description Triggered when a new order is created in Shopify
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description Webhook processed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid webhook payload */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid HMAC signature */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    shopify_orders_paid: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Shopify orders/paid webhook
         * @description Triggered when an order is paid in Shopify
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description Webhook processed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid webhook payload */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid HMAC signature */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    shopify_checkouts_update: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Shopify checkouts/update webhook
         * @description Triggered when a checkout is updated (abandoned checkout detection)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": Record<string, never>;
                };
            };
            responses: {
                /** @description Webhook processed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid webhook payload */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid HMAC signature */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    mitto_dlr: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Mitto DLR webhook
         * @description Triggered when SMS delivery status changes
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["MittoDLRPayload"];
                };
            };
            responses: {
                /** @description DLR processed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid DLR payload */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid HMAC signature */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    mitto_inbound: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Mitto inbound webhook
         * @description Triggered when an inbound SMS is received
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["MittoInboundPayload"];
                };
            };
            responses: {
                /** @description Inbound message processed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid inbound payload */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Invalid HMAC signature */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export interface components {
    schemas: {
        ErrorResponse: {
            /**
             * @description Error code
             * @example validation_error
             */
            error: string;
            /**
             * @description Human-readable error message
             * @example Invalid request data
             */
            message: string;
            /** @description Additional error details */
            details?: Record<string, never>;
            /**
             * @description Request trace ID for debugging
             * @example req_123456
             */
            traceId?: string;
        };
        PaginatedResponse: {
            data?: unknown[];
            pagination?: {
                page?: number;
                limit?: number;
                total?: number;
                pages?: number;
            };
        };
        HealthResponse: {
            /**
             * @description Overall system health
             * @example true
             */
            ok: boolean;
            /**
             * @description API version
             * @example 1.0.0
             */
            version: string;
            db: {
                /** @example true */
                ok: boolean;
                /** @example 12 */
                latency_ms: number;
            };
            redis: {
                /** @example true */
                ok: boolean;
                /** @example 8 */
                latency_ms: number;
            };
            queues: {
                /** @example true */
                ok: boolean;
                /** @example 2 */
                workers: number;
            };
            pii: {
                /** @example 95 */
                phone_pct?: number | null;
                /** @example 98 */
                email_pct?: number | null;
            };
            /**
             * Format: date-time
             * @example 2024-01-15T10:30:00Z
             */
            timestamp: string;
            /** @example req_123456 */
            request_id: string;
        };
        QueueHealthResponse: {
            /** @example true */
            redis: boolean;
            queues: {
                events?: components["schemas"]["QueueStatus"];
                automations?: components["schemas"]["QueueStatus"];
                campaigns?: components["schemas"]["QueueStatus"];
                delivery?: components["schemas"]["QueueStatus"];
                housekeeping?: components["schemas"]["QueueStatus"];
            };
            dlq: {
                /** @example 0 */
                events_dead?: number;
                /** @example 0 */
                delivery_dead?: number;
            };
            /**
             * Format: date-time
             * @example 2024-01-15T10:30:00Z
             */
            timestamp: string;
            /** @example req_123456 */
            request_id: string;
        };
        QueueStatus: {
            /** @example 5 */
            waiting?: number;
            /** @example 2 */
            active?: number;
            /** @example 150 */
            completed?: number;
            /** @example 3 */
            failed?: number;
            /** @example 1 */
            delayed?: number;
            /** @example 0 */
            paused?: number;
            /** @example 0 */
            drained?: number;
        };
        Campaign: {
            /**
             * @description Campaign ID
             * @example camp_123456
             */
            id: string;
            /**
             * @description Campaign name
             * @example Black Friday Sale
             */
            name: string;
            /**
             * @example draft
             * @enum {string}
             */
            status: "draft" | "scheduled" | "sending" | "paused" | "completed" | "failed";
            /**
             * @description Template content
             * @example Get 20% off with code {{ discount_code }}!
             */
            template?: string | null;
            /**
             * @description Target segment ID
             * @example seg_123
             */
            segmentId?: string | null;
            /**
             * @description Template ID
             * @example tpl_123
             */
            templateId?: string | null;
            /**
             * @description Template key
             * @example welcome
             */
            templateKey?: string | null;
            /**
             * Format: date-time
             * @description Scheduled send time
             * @example 2024-11-24T00:00:00Z
             */
            scheduleAt?: string | null;
            /**
             * @description UTM tracking parameters
             * @example {
             *       "source": "sms",
             *       "medium": "campaign",
             *       "campaign": "black_friday"
             *     }
             */
            utmJson?: Record<string, never> | null;
            /**
             * @description Batch size for sending
             * @example 100
             */
            batchSize?: number | null;
            /**
             * @description SMS body text
             * @example Get 20% off with code SAVE20!
             */
            bodyText?: string | null;
            /**
             * @description Associated discount ID
             * @example disc_123
             */
            discountId?: string | null;
            /**
             * @description Shop ID
             * @example shop_123
             */
            shopId: string;
            /**
             * Format: date-time
             * @example 2024-01-15T10:30:00Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2024-01-15T10:30:00Z
             */
            updatedAt: string;
        };
        CreateCampaignRequest: {
            /** @example Black Friday Sale */
            name: string;
            /** @example Get 20% off with code {{ discount_code }}! */
            template?: string | null;
            /** @example seg_123 */
            segmentId?: string | null;
            /** @example tpl_123 */
            templateId?: string | null;
            /** @example welcome */
            templateKey?: string | null;
            /**
             * Format: date-time
             * @example 2024-11-24T00:00:00Z
             */
            scheduleAt?: string | null;
            /** @example {
             *       "source": "sms",
             *       "medium": "campaign",
             *       "campaign": "black_friday"
             *     } */
            utmJson?: Record<string, never> | null;
            /** @example 100 */
            batchSize?: number | null;
            /** @example Get 20% off with code SAVE20! */
            bodyText?: string | null;
            /** @example disc_123 */
            discountId?: string | null;
        };
        UpdateCampaignRequest: {
            /** @example Updated Campaign Name */
            name?: string;
            /** @example Updated template content */
            template?: string | null;
            /** @example seg_456 */
            segmentId?: string | null;
            /**
             * Format: date-time
             * @example 2024-12-01T00:00:00Z
             */
            scheduleAt?: string | null;
            /**
             * @example scheduled
             * @enum {string}
             */
            status?: "draft" | "scheduled" | "sending" | "paused" | "completed" | "failed";
        };
        CampaignListResponse: components["schemas"]["PaginatedResponse"] & {
            data?: components["schemas"]["Campaign"][];
        };
        CampaignEstimate: {
            /** @example 1500 */
            estimatedRecipients: number;
            /** @example 45 */
            estimatedCost: number;
            /** @example 1 */
            segmentsUsed: number;
            /** @example [
             *       "Template will create 2 SMS parts"
             *     ] */
            warnings?: string[];
        };
        Discount: {
            /**
             * @description Discount ID
             * @example disc_123456
             */
            id: string;
            /**
             * @description Discount code
             * @example SAVE20
             */
            code: string;
            /**
             * @description Discount title
             * @example 20% Off Everything
             */
            title?: string | null;
            /**
             * @description Discount type
             * @example percentage
             * @enum {string}
             */
            type: "percentage" | "amount" | "shipping";
            /**
             * @description Discount value
             * @example 20
             */
            value?: number | null;
            /**
             * @description Currency code
             * @example USD
             */
            currencyCode?: string | null;
            /**
             * Format: date-time
             * @description Start date
             * @example 2024-01-01T00:00:00Z
             */
            startsAt?: string | null;
            /**
             * Format: date-time
             * @description End date
             * @example 2024-01-31T23:59:59Z
             */
            endsAt?: string | null;
            /**
             * @description Usage limit
             * @example 1000
             */
            usageLimit?: number | null;
            /**
             * @description One use per customer
             * @example true
             */
            oncePerCustomer?: boolean | null;
            /**
             * @description Apply URL
             * @example https://shop.com/discount/SAVE20
             */
            applyUrl?: string | null;
            /**
             * @description Shopify discount ID
             * @example gid://shopify/DiscountCodeNode/123456
             */
            providerId?: string | null;
            /**
             * @description Discount status
             * @example active
             * @enum {string|null}
             */
            status?: "active" | "expired" | "scheduled" | null;
            /**
             * @description UTM parameters
             * @example {
             *       "source": "sms",
             *       "medium": "campaign",
             *       "campaign": "black_friday"
             *     }
             */
            utmJson?: Record<string, never> | null;
            /**
             * @description Shop ID
             * @example shop_123
             */
            shopId: string;
            /**
             * Format: date-time
             * @example 2024-01-15T10:30:00Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2024-01-15T10:30:00Z
             */
            updatedAt: string;
        };
        CreateDiscountRequest: {
            /** @example SAVE20 */
            code: string;
            /** @example 20% Off Everything */
            title?: string | null;
            /**
             * @example percentage
             * @enum {string}
             */
            type: "percentage" | "amount" | "shipping";
            /** @example 20 */
            value?: number | null;
            /** @example USD */
            currencyCode?: string | null;
            /**
             * Format: date-time
             * @example 2024-01-01T00:00:00Z
             */
            startsAt?: string | null;
            /**
             * Format: date-time
             * @example 2024-01-31T23:59:59Z
             */
            endsAt?: string | null;
            /** @example 1000 */
            usageLimit?: number | null;
            /** @example true */
            oncePerCustomer?: boolean | null;
            /** @example {
             *       "source": "sms",
             *       "medium": "campaign",
             *       "campaign": "black_friday"
             *     } */
            utmJson?: Record<string, never> | null;
        };
        UpdateDiscountRequest: {
            /** @example Updated Discount Title */
            title?: string | null;
            /** @example 25 */
            value?: number | null;
            /**
             * Format: date-time
             * @example 2024-02-01T00:00:00Z
             */
            startsAt?: string | null;
            /**
             * Format: date-time
             * @example 2024-02-28T23:59:59Z
             */
            endsAt?: string | null;
            /** @example 2000 */
            usageLimit?: number | null;
            /** @example false */
            oncePerCustomer?: boolean | null;
        };
        DiscountListResponse: components["schemas"]["PaginatedResponse"] & {
            data?: components["schemas"]["Discount"][];
        };
        DiscountConflict: {
            /** @example disc_123 */
            id: string;
            /** @example SAVE20 */
            code: string;
            /** @example percentage */
            type: string;
            /**
             * @example exact_match
             * @enum {string}
             */
            conflictType: "exact_match" | "similar_code" | "overlapping_period";
            /** @example Discount code already exists */
            message?: string;
        };
        Template: {
            /**
             * @description Template ID
             * @example tpl_123456
             */
            id: string;
            /**
             * @description Template name
             * @example Abandoned Checkout Recovery
             */
            name: string;
            /**
             * @description Trigger type
             * @example abandoned_checkout
             * @enum {string}
             */
            trigger: "abandoned_checkout" | "order_created" | "order_paid" | "fulfillment_update" | "welcome" | "back_in_stock";
            /**
             * @description Template body with Liquid syntax
             * @example Hi {{ customer.first_name }}, complete your order: {{ recovery_url }}
             */
            body: string;
            /**
             * @description Template variables
             * @example {
             *       "customer": {
             *         "first_name": "John"
             *       },
             *       "recovery_url": "https://shop.com/checkout"
             *     }
             */
            variables?: Record<string, never> | null;
            /**
             * @description Shop ID
             * @example shop_123
             */
            shopId: string;
            /**
             * Format: date-time
             * @example 2024-01-15T10:30:00Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2024-01-15T10:30:00Z
             */
            updatedAt: string;
        };
        CreateTemplateRequest: {
            /** @example Abandoned Checkout Recovery */
            name: string;
            /**
             * @example abandoned_checkout
             * @enum {string}
             */
            trigger: "abandoned_checkout" | "order_created" | "order_paid" | "fulfillment_update" | "welcome" | "back_in_stock";
            /** @example Hi {{ customer.first_name }}, complete your order: {{ recovery_url }} */
            body: string;
            /** @example {
             *       "customer": {
             *         "first_name": "John"
             *       },
             *       "recovery_url": "https://shop.com/checkout"
             *     } */
            variables?: Record<string, never> | null;
        };
        TemplateListResponse: components["schemas"]["PaginatedResponse"] & {
            data?: components["schemas"]["Template"][];
        };
        SMSSegments: {
            /**
             * @description Number of SMS parts
             * @example 1
             */
            parts: number;
            /**
             * @description Character count
             * @example 120
             */
            characters: number;
            /**
             * @description Character encoding
             * @example GSM
             * @enum {string}
             */
            encoding: "GSM" | "Unicode";
        };
        Segment: {
            /**
             * @description Segment ID
             * @example seg_123456
             */
            id: string;
            /**
             * @description Segment name
             * @example VIP Customers
             */
            name: string;
            /**
             * @description Segment filter DSL
             * @example {
             *       "and": [
             *         {
             *           "consent": "opted_in"
             *         },
             *         {
             *           "tags": {
             *             "has": "vip"
             *           }
             *         }
             *       ]
             *     }
             */
            filterJson: Record<string, never>;
            /**
             * Format: date-time
             * @description Last materialization time
             * @example 2024-01-15T10:30:00Z
             */
            lastMaterializedAt?: string | null;
            /**
             * @description Shop ID
             * @example shop_123
             */
            shopId: string;
            /**
             * Format: date-time
             * @example 2024-01-15T10:30:00Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2024-01-15T10:30:00Z
             */
            updatedAt: string;
        };
        CreateSegmentRequest: {
            /** @example VIP Customers */
            name: string;
            /**
             * @description Segment filter DSL
             * @example {
             *       "and": [
             *         {
             *           "consent": "opted_in"
             *         },
             *         {
             *           "tags": {
             *             "has": "vip"
             *           }
             *         }
             *       ]
             *     }
             */
            filterJson: Record<string, never>;
        };
        SegmentListResponse: components["schemas"]["PaginatedResponse"] & {
            data?: components["schemas"]["Segment"][];
        };
        OverviewReport: {
            period: {
                /**
                 * Format: date
                 * @example 2024-01-01
                 */
                start: string;
                /**
                 * Format: date
                 * @example 2024-01-31
                 */
                end: string;
            };
            /** @example 15000 */
            totalMessages: number;
            /** @example 14250 */
            deliveredMessages: number;
            /** @example 750 */
            failedMessages: number;
            /** @example 25 */
            optOuts: number;
            /** @example 45000 */
            revenue: number;
            /** @example 2.5 */
            averageDeliveryTime?: number;
            topCampaigns?: {
                /** @example camp_123 */
                id?: string;
                /** @example Black Friday Sale */
                name?: string;
                /** @example 5000 */
                messages?: number;
                /** @example 15000 */
                revenue?: number;
            }[];
        };
        MessagingReport: {
            period: {
                /**
                 * Format: date
                 * @example 2024-01-01
                 */
                start: string;
                /**
                 * Format: date
                 * @example 2024-01-31
                 */
                end: string;
            };
            timeseries: {
                /**
                 * Format: date
                 * @example 2024-01-01
                 */
                date?: string;
                /** @example 500 */
                sent?: number;
                /** @example 475 */
                delivered?: number;
                /** @example 25 */
                failed?: number;
                /** @example 2 */
                optOuts?: number;
            }[];
            summary: {
                /** @example 15000 */
                totalSent?: number;
                /** @example 14250 */
                totalDelivered?: number;
                /** @example 750 */
                totalFailed?: number;
                /** @example 25 */
                totalOptOuts?: number;
                /** @example 95 */
                deliveryRate?: number;
                /** @example 0.17 */
                optOutRate?: number;
            };
        };
        ShopSettings: {
            /**
             * @description Shop ID
             * @example shop_123
             */
            shopId: string;
            /**
             * @description Shop timezone
             * @example America/New_York
             */
            timezone: string;
            /**
             * @description Shop locale
             * @example en-US
             */
            locale: string;
            /** @description Automation settings */
            automations: {
                abandoned_checkout?: {
                    /** @example true */
                    enabled?: boolean;
                    /** @example 60 */
                    delay_minutes?: number;
                    /** @example Complete your order: {{ recovery_url }} */
                    template?: string;
                };
                welcome?: {
                    /** @example true */
                    enabled?: boolean;
                    /** @example 5 */
                    delay_minutes?: number;
                    /** @example Welcome {{ customer.first_name }}! */
                    template?: string;
                };
            };
            /**
             * Format: date-time
             * @example 2024-01-15T10:30:00Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @example 2024-01-15T10:30:00Z
             */
            updatedAt: string;
        };
        UpdateSettingsRequest: {
            /** @example America/New_York */
            timezone?: string;
            /** @example en-US */
            locale?: string;
            automations?: {
                abandoned_checkout?: {
                    /** @example true */
                    enabled?: boolean;
                    /** @example 60 */
                    delay_minutes?: number;
                    /** @example Complete your order: {{ recovery_url }} */
                    template?: string;
                };
                welcome?: {
                    /** @example true */
                    enabled?: boolean;
                    /** @example 5 */
                    delay_minutes?: number;
                    /** @example Welcome {{ customer.first_name }}! */
                    template?: string;
                };
            };
        };
        MittoDLRPayload: {
            /**
             * @description Message ID
             * @example msg_123456
             */
            messageId: string;
            /**
             * @description Delivery status
             * @example delivered
             * @enum {string}
             */
            status: "delivered" | "failed" | "pending";
            /**
             * Format: date-time
             * @description Status timestamp
             * @example 2024-01-15T10:30:00Z
             */
            timestamp: string;
            /**
             * @description Error code if failed
             * @example INVALID_NUMBER
             */
            errorCode?: string | null;
            /**
             * @description Error message if failed
             * @example Invalid phone number format
             */
            errorMessage?: string | null;
        };
        MittoInboundPayload: {
            /**
             * @description Sender phone number
             * @example +1234567890
             */
            phone: string;
            /**
             * @description Inbound message text
             * @example STOP
             */
            message: string;
            /**
             * Format: date-time
             * @description Message timestamp
             * @example 2024-01-15T10:30:00Z
             */
            timestamp: string;
            /**
             * @description Message ID
             * @example inbound_123456
             */
            messageId?: string | null;
        };
        DiscountCodePool: {
            /** @example pool_123 */
            id: string;
            /** @example shop_123 */
            shopId: string;
            /** @example disc_123 */
            discountId: string;
            /** @example Black Friday Pool */
            name: string;
            /** @example Pool for Black Friday campaign */
            description?: string | null;
            /** @example 1000 */
            totalCodes: number;
            /** @example 150 */
            reservedCodes: number;
            /** @example 50 */
            usedCodes: number;
            /**
             * @example active
             * @enum {string}
             */
            status: "active" | "inactive" | "exhausted";
            /**
             * Format: date-time
             * @example 2024-01-15T10:30:00Z
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @example 2024-01-15T10:30:00Z
             */
            updatedAt?: string;
        };
        DiscountCode: {
            /** @example code_123 */
            id: string;
            /** @example shop_123 */
            shopId: string;
            /** @example pool_123 */
            poolId: string;
            /** @example disc_123 */
            discountId: string;
            /** @example SAVE20_001 */
            code: string;
            /**
             * @example available
             * @enum {string}
             */
            status: "available" | "reserved" | "used" | "expired";
            /**
             * Format: date-time
             * @example 2024-01-15T10:30:00Z
             */
            reservedAt?: string | null;
            /**
             * Format: date-time
             * @example 2024-01-15T10:30:00Z
             */
            usedAt?: string | null;
            /** @example recipient_123 */
            assignedTo?: string | null;
            /** @example gid://shopify/DiscountCode/123456 */
            shopifyGid?: string | null;
            /** @example res_123 */
            reservationId?: string | null;
            /**
             * Format: date-time
             * @example 2024-01-15T10:30:00Z
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @example 2024-01-15T10:30:00Z
             */
            updatedAt?: string;
        };
        DiscountCodeReservation: {
            /** @example res_123 */
            id: string;
            /** @example shop_123 */
            shopId: string;
            /** @example pool_123 */
            poolId: string;
            /** @example camp_123 */
            campaignId: string;
            /** @example 50 */
            quantity: number;
            /**
             * @example active
             * @enum {string}
             */
            status: "active" | "used" | "expired" | "cancelled";
            /**
             * Format: date-time
             * @example 2024-01-22T10:30:00Z
             */
            expiresAt?: string | null;
            /**
             * Format: date-time
             * @example 2024-01-15T10:30:00Z
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @example 2024-01-15T10:30:00Z
             */
            updatedAt?: string;
        };
        Automation: {
            /** @example auto_123 */
            id: string;
            /** @example shop_123 */
            shopId: string;
            /** @example Abandoned Checkout Recovery */
            name: string;
            /**
             * @example abandoned_checkout
             * @enum {string}
             */
            trigger: "abandoned_checkout" | "order_created" | "order_paid" | "fulfillment_update";
            /** @example true */
            enabled: boolean;
            /** @example 60 */
            delayMinutes: number;
            /** @example Complete your order: {{ recovery_url }} */
            template: string;
            /** @description Additional trigger conditions */
            conditions?: Record<string, never> | null;
            /** @description Discount configuration for this automation */
            discountConfig?: Record<string, never> | null;
            /**
             * Format: date-time
             * @example 2024-01-15T10:30:00Z
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @example 2024-01-15T10:30:00Z
             */
            updatedAt?: string;
        };
        AbandonedCheckout: {
            /** @example abandoned_123 */
            id: string;
            /** @example shop_123 */
            shopId: string;
            /** @example checkout_token_123 */
            checkoutToken: string;
            /** @example customer_123 */
            customerId?: string | null;
            /** @example customer@example.com */
            email?: string | null;
            /** @example +1234567890 */
            phone?: string | null;
            /** @example 99.99 */
            totalPrice?: number | null;
            /** @example USD */
            currency?: string | null;
            /**
             * Format: date-time
             * @example 2024-01-15T10:30:00Z
             */
            abandonedAt: string;
            /**
             * Format: date-time
             * @example 2024-01-15T11:30:00Z
             */
            recoveredAt?: string | null;
            /** @example https://shop.myshopify.com/checkouts/123 */
            abandonedCheckoutUrl?: string | null;
            /**
             * Format: date-time
             * @example 2024-01-15T10:30:00Z
             */
            createdAt?: string;
            /**
             * Format: date-time
             * @example 2024-01-15T10:30:00Z
             */
            updatedAt?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getHealth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description System health status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthResponse"];
                };
            };
            /** @description System unhealthy */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getReadiness: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description System ready */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example true */
                        ready?: boolean;
                        /** @example req_123456 */
                        request_id?: string;
                    };
                };
            };
            /** @description System not ready */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example false */
                        ready?: boolean;
                        /** @example false */
                        db?: boolean;
                        /** @example true */
                        redis?: boolean;
                        /** @example true */
                        queues?: boolean;
                        /** @example req_123456 */
                        request_id?: string;
                    };
                };
            };
        };
    };
    getMetrics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Prometheus metrics */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example # HELP sms_send_attempts_total Total number of SMS send attempts
                     *     # TYPE sms_send_attempts_total counter
                     *     sms_send_attempts_total{provider="mitto",status="success"} 150
                     *     sms_send_attempts_total{provider="mitto",status="failed"} 5
                     *      */
                    "text/plain": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getQueueHealth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Queue health status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["QueueHealthResponse"];
                };
            };
        };
    };
    installApp: {
        parameters: {
            query: {
                /** @description Shopify shop domain (e.g., mystore.myshopify.com) */
                shop: string;
                /** @description HMAC signature for request validation */
                hmac?: string;
                /** @description Request timestamp */
                timestamp?: string;
                /** @description OAuth state parameter */
                state?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Redirect to Shopify OAuth */
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    handleOAuthCallback: {
        parameters: {
            query: {
                /** @description Authorization code from Shopify */
                code: string;
                /** @description Shopify shop domain */
                shop: string;
                /** @description OAuth state parameter */
                state?: string;
                /** @description HMAC signature for request validation */
                hmac?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OAuth successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example true */
                        success?: boolean;
                        /** @example mystore.myshopify.com */
                        shop?: string;
                        /** @example jwt_token_here */
                        token?: string;
                    };
                };
            };
            /** @description OAuth failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listCampaigns: {
        parameters: {
            query: {
                /** @description Shopify shop domain */
                shop: string;
                /** @description Page number for pagination */
                page?: number;
                /** @description Number of items per page */
                limit?: number;
                /** @description Filter by campaign status */
                status?: "draft" | "scheduled" | "sending" | "paused" | "completed" | "failed";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of campaigns */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CampaignListResponse"];
                };
            };
            /** @description Invalid request parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createCampaign: {
        parameters: {
            query: {
                /** @description Shopify shop domain */
                shop: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCampaignRequest"];
            };
        };
        responses: {
            /** @description Campaign created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Campaign"];
                };
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getCampaign: {
        parameters: {
            query: {
                /** @description Shopify shop domain */
                shop: string;
            };
            header?: never;
            path: {
                /** @description Campaign ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Campaign details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Campaign"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Campaign not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    updateCampaign: {
        parameters: {
            query: {
                /** @description Shopify shop domain */
                shop: string;
            };
            header?: never;
            path: {
                /** @description Campaign ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCampaignRequest"];
            };
        };
        responses: {
            /** @description Campaign updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Campaign"];
                };
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Campaign not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteCampaign: {
        parameters: {
            query: {
                /** @description Shopify shop domain */
                shop: string;
            };
            header?: never;
            path: {
                /** @description Campaign ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Campaign deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Cannot delete sent campaign */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Campaign not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    estimateCampaign: {
        parameters: {
            query: {
                /** @description Shopify shop domain */
                shop: string;
            };
            header?: never;
            path: {
                /** @description Campaign ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Campaign estimate */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CampaignEstimate"];
                };
            };
            /** @description Campaign not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    testSendCampaign: {
        parameters: {
            query: {
                /** @description Shopify shop domain */
                shop: string;
            };
            header?: never;
            path: {
                /** @description Campaign ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description Phone number in E.164 format
                     * @example +1234567890
                     */
                    phone?: string;
                    /**
                     * @description Template variables for testing
                     * @example {
                     *       "customer": {
                     *         "first_name": "John",
                     *         "last_name": "Doe"
                     *       },
                     *       "discount_code": "TEST20"
                     *     }
                     */
                    variables?: Record<string, never>;
                };
            };
        };
        responses: {
            /** @description Test SMS sent successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example true */
                        success?: boolean;
                        /** @example msg_123456 */
                        messageId?: string;
                    };
                };
            };
            /** @description Invalid phone number or campaign */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    sendCampaign: {
        parameters: {
            query: {
                /** @description Shopify shop domain */
                shop: string;
            };
            header?: never;
            path: {
                /** @description Campaign ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Campaign sending started */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example true */
                        success?: boolean;
                        /** @example camp_123456 */
                        campaignId?: string;
                        /** @example 1500 */
                        estimatedRecipients?: number;
                    };
                };
            };
            /** @description Campaign cannot be sent */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    listDiscounts: {
        parameters: {
            query: {
                /** @description Shopify shop domain */
                shop: string;
                page?: number;
                limit?: number;
                /** @description Filter by discount status */
                status?: "active" | "expired" | "scheduled";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of discounts */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DiscountListResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createDiscount: {
        parameters: {
            query: {
                /** @description Shopify shop domain */
                shop: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateDiscountRequest"];
            };
        };
        responses: {
            /** @description Discount created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Discount"];
                };
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Discount code already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDiscount: {
        parameters: {
            query: {
                /** @description Shopify shop domain */
                shop: string;
            };
            header?: never;
            path: {
                /** @description Discount ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Discount details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Discount"];
                };
            };
            /** @description Discount not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    updateDiscount: {
        parameters: {
            query: {
                /** @description Shopify shop domain */
                shop: string;
            };
            header?: never;
            path: {
                /** @description Discount ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateDiscountRequest"];
            };
        };
        responses: {
            /** @description Discount updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Discount"];
                };
            };
            /** @description Discount not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deleteDiscount: {
        parameters: {
            query: {
                /** @description Shopify shop domain */
                shop: string;
            };
            header?: never;
            path: {
                /** @description Discount ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Discount deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Discount not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    checkDiscountConflicts: {
        parameters: {
            query: {
                /** @description Shopify shop domain */
                shop: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description Discount code to check
                     * @example SAVE20
                     */
                    code?: string;
                    /** @description Discount ID to exclude from conflict check */
                    excludeId?: string;
                };
            };
        };
        responses: {
            /** @description Conflict check results */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example false */
                        hasConflicts?: boolean;
                        conflicts?: components["schemas"]["DiscountConflict"][];
                        /** @example [
                         *       "SAVE20_2024",
                         *       "SAVE20_NEW"
                         *     ] */
                        suggestions?: string[];
                    };
                };
            };
        };
    };
    syncDiscountsFromShopify: {
        parameters: {
            query: {
                /** @description Shopify shop domain */
                shop: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description GraphQL query to filter discounts
                     * @example status:active
                     */
                    query?: string;
                };
            };
        };
        responses: {
            /** @description Sync results */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 5 */
                        imported?: number;
                        /** @example 2 */
                        skipped?: number;
                        errors?: string[];
                    };
                };
            };
        };
    };
    importDiscountCodes: {
        parameters: {
            query: {
                /** @description Shopify shop domain */
                shop: string;
            };
            header?: never;
            path: {
                /** @description Discount ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @example [
                     *       "SAVE20_001",
                     *       "SAVE20_002",
                     *       "SAVE20_003"
                     *     ] */
                    codes?: string[];
                };
            };
        };
        responses: {
            /** @description Import results */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 3 */
                        imported?: number;
                        /** @example 0 */
                        skipped?: number;
                    };
                };
            };
        };
    };
    generateDiscountCodes: {
        parameters: {
            query: {
                /** @description Shopify shop domain */
                shop: string;
            };
            header?: never;
            path: {
                /** @description Discount ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @example 100 */
                    quantity?: number;
                    /** @example SAVE20 */
                    prefix?: string;
                    /** @example SAVE20_{NUMBER} */
                    pattern?: string;
                };
            };
        };
        responses: {
            /** @description Generation results */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 100 */
                        generated?: number;
                        shopifyGids?: string[];
                    };
                };
            };
        };
    };
    getPoolStatus: {
        parameters: {
            query: {
                /** @description Shopify shop domain */
                shop: string;
            };
            header?: never;
            path: {
                /** @description Discount ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Pool status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 1000 */
                        total?: number;
                        /** @example 150 */
                        reserved?: number;
                        /** @example 800 */
                        available?: number;
                        /** @example 50 */
                        used?: number;
                    };
                };
            };
        };
    };
    reserveDiscountCodes: {
        parameters: {
            query: {
                /** @description Shopify shop domain */
                shop: string;
            };
            header?: never;
            path: {
                /** @description Discount ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @example camp_123 */
                    campaignId?: string;
                    /** @example 50 */
                    count?: number;
                };
            };
        };
        responses: {
            /** @description Reservation results */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example res_123 */
                        reservationId?: string;
                        /** @example 50 */
                        reserved?: number;
                        /** Format: date-time */
                        expiresAt?: string;
                    };
                };
            };
        };
    };
    deleteReservation: {
        parameters: {
            query: {
                /** @description Shopify shop domain */
                shop: string;
            };
            header?: never;
            path: {
                /** @description Discount ID */
                id: string;
                /** @description Reservation ID */
                reservationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Reservation cancelled */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example true */
                        cancelled?: boolean;
                        /** @example 50 */
                        released?: number;
                    };
                };
            };
        };
    };
    prepareCampaign: {
        parameters: {
            query: {
                /** @description Shopify shop domain */
                shop: string;
            };
            header?: never;
            path: {
                /** @description Campaign ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Campaign prepared */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example true */
                        prepared?: boolean;
                        /** @example 100 */
                        codesAssigned?: number;
                        /** @example 100 */
                        shortlinksBuilt?: number;
                    };
                };
            };
        };
    };
    listTemplates: {
        parameters: {
            query: {
                /** @description Shopify shop domain */
                shop: string;
                /** @description Filter by trigger type */
                trigger?: "abandoned_checkout" | "order_created" | "order_paid" | "fulfillment_update" | "welcome" | "back_in_stock";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of templates */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TemplateListResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createTemplate: {
        parameters: {
            query: {
                /** @description Shopify shop domain */
                shop: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTemplateRequest"];
            };
        };
        responses: {
            /** @description Template created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Template"];
                };
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    previewTemplate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description Template body with Liquid syntax
                     * @example Hi {{ customer.first_name }}, your order {{ order.number }} is ready!
                     */
                    body?: string;
                    /**
                     * @description Sample variables for rendering
                     * @example {
                     *       "customer": {
                     *         "first_name": "John"
                     *       },
                     *       "order": {
                     *         "number": "1001"
                     *       }
                     *     }
                     */
                    variables?: Record<string, never>;
                    /**
                     * @description Locale for formatting
                     * @default en-US
                     */
                    locale?: string;
                };
            };
        };
        responses: {
            /** @description Template preview */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example Hi John, your order 1001 is ready! */
                        text?: string;
                        /** @example [
                         *       "Template will create 1 SMS parts"
                         *     ] */
                        warnings?: string[];
                        segments?: components["schemas"]["SMSSegments"];
                    };
                };
            };
        };
    };
    validateTemplate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Template body to validate */
                    body?: string;
                    /**
                     * @description Trigger type for validation
                     * @enum {string}
                     */
                    trigger?: "abandoned_checkout" | "order_created" | "order_paid" | "fulfillment_update" | "welcome" | "back_in_stock";
                };
            };
        };
        responses: {
            /** @description Validation results */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example true */
                        ok?: boolean;
                        /** @example [] */
                        errors?: string[];
                        /** @example [
                         *       "Template will create 1 SMS parts"
                         *     ] */
                        warnings?: string[];
                    };
                };
            };
        };
    };
    getTemplateVariables: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Trigger type */
                trigger: "abandoned_checkout" | "order_created" | "order_paid" | "fulfillment_update" | "welcome" | "back_in_stock";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Available variables */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example [
                         *       "recovery_url",
                         *       "checkout_id"
                         *     ] */
                        required?: string[];
                        /** @example [
                         *       "customer_name",
                         *       "cart_total",
                         *       "currency",
                         *       "shop_name"
                         *     ] */
                        optional?: string[];
                        /** @example Abandoned checkout recovery */
                        description?: string;
                    };
                };
            };
        };
    };
    listSegments: {
        parameters: {
            query: {
                /** @description Shopify shop domain */
                shop: string;
                page?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of segments */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SegmentListResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createSegment: {
        parameters: {
            query: {
                /** @description Shopify shop domain */
                shop: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateSegmentRequest"];
            };
        };
        responses: {
            /** @description Segment created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Segment"];
                };
            };
            /** @description Invalid request data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    previewSegment: {
        parameters: {
            query: {
                /** @description Shopify shop domain */
                shop: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description Segment filter DSL
                     * @example {
                     *       "and": [
                     *         {
                     *           "consent": "opted_in"
                     *         },
                     *         {
                     *           "tags": {
                     *             "has": "vip"
                     *           }
                     *         }
                     *       ]
                     *     }
                     */
                    filterJson?: Record<string, never>;
                };
            };
        };
        responses: {
            /** @description Segment preview */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example 150 */
                        estimatedCount?: number;
                        /** @description Parsed filter object */
                        filter?: Record<string, never>;
                        /** @example [] */
                        warnings?: string[];
                    };
                };
            };
        };
    };
    getOverviewReport: {
        parameters: {
            query: {
                /** @description Shopify shop domain */
                shop: string;
                /** @description Reporting period */
                period?: "7d" | "30d" | "90d" | "1y";
                /** @description Start date (overrides period) */
                startDate?: string;
                /** @description End date (overrides period) */
                endDate?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Overview report data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OverviewReport"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getMessagingReport: {
        parameters: {
            query: {
                /** @description Shopify shop domain */
                shop: string;
                /** @description Reporting period */
                period?: "7d" | "30d" | "90d" | "1y";
                /** @description Group results by time period */
                groupBy?: "day" | "week" | "month";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Messaging report data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MessagingReport"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getSettings: {
        parameters: {
            query: {
                /** @description Shopify shop domain */
                shop: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Shop settings */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShopSettings"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    updateSettings: {
        parameters: {
            query: {
                /** @description Shopify shop domain */
                shop: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateSettingsRequest"];
            };
        };
        responses: {
            /** @description Settings updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShopSettings"];
                };
            };
            /** @description Invalid settings data */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    handleOrdersCreate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description Webhook processed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid webhook payload */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid HMAC signature */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    handleOrdersPaid: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description Webhook processed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid webhook payload */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid HMAC signature */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    handleCheckoutsCreate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description Webhook processed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid webhook payload */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid HMAC signature */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    handleCheckoutsUpdate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": Record<string, never>;
            };
        };
        responses: {
            /** @description Webhook processed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid webhook payload */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid HMAC signature */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    handleMittoDLR: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MittoDLRPayload"];
            };
        };
        responses: {
            /** @description DLR processed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid DLR payload */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid HMAC signature */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    handleMittoInbound: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MittoInboundPayload"];
            };
        };
        responses: {
            /** @description Inbound message processed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid inbound payload */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid HMAC signature */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    publicUnsubscribe: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description Phone number to unsubscribe
                     * @example +1234567890
                     */
                    phone?: string;
                    /**
                     * @description Shop domain
                     * @example mystore.myshopify.com
                     */
                    shop?: string;
                };
            };
        };
        responses: {
            /** @description Unsubscribe processed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example true */
                        success?: boolean;
                        /** @example You have been unsubscribed from SMS messages */
                        message?: string;
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    publicBackInStock: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description Phone number for notification
                     * @example +1234567890
                     */
                    phone?: string;
                    /**
                     * @description Shop domain
                     * @example mystore.myshopify.com
                     */
                    shop?: string;
                    /**
                     * @description Shopify product ID
                     * @example 123456789
                     */
                    productId?: string;
                    /**
                     * @description Shopify variant ID
                     * @example 987654321
                     */
                    variantId?: string;
                };
            };
        };
        responses: {
            /** @description Back in stock request processed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example true */
                        success?: boolean;
                        /** @example You will be notified when this product is back in stock */
                        message?: string;
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}

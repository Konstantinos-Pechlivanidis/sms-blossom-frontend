/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Liveness & readiness probe */
        get: operations["getHealth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/public/storefront/consent": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Collect SMS consent via App Proxy
         * @description Validates App Proxy signature, normalizes phone to E.164, links/creates customer (PCD-safe), updates Shopify SMS consent when allowed, and upserts local Contact.
         *
         */
        post: operations["collectConsent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/public/unsubscribe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Public unsubscribe (App Proxy) */
        get: operations["publicUnsubscribe"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/public/back-in-stock/interest": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register back-in-stock interest (App Proxy signed) */
        post: operations["registerBackInStockInterest"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/discounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a discount code (Shopify Admin GraphQL) */
        post: operations["createDiscount"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/discounts/apply-url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Build canonical apply URL for a code */
        get: operations["buildApplyUrl"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get shop settings (rules, timezone) */
        get: operations["getSettings"];
        /** Update shop settings (quiet hours, caps, abandoned delay) */
        put: operations["updateSettings"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/automations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Read automations config
         * @description Includes abandoned checkout settings:
         *     - `abandoned.delayMinutes`: inactivity window before SMS is sent (default 30)
         *     - `abandoned.discountCode`: optional code appended to recovery URL
         *
         */
        get: operations["getAutomations"];
        /** Update automations config */
        put: operations["updateAutomations"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/segments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create or update a Segment */
        post: operations["createSegment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/segments/preview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Preview segment audience (count + sample) */
        post: operations["previewSegment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/{id}/snapshot": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Snapshot audience from segment/filter into recipients */
        post: operations["snapshotCampaign"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/{id}/estimate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Estimate cost/segments for pending recipients */
        get: operations["estimateCampaign"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/{id}/test-send": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Test send to a specific phone (E.164) */
        post: operations["testSendCampaign"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/{id}/send-now": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send to snapshotted audience (batched, throttled) */
        post: operations["sendCampaign"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/{id}/attach-discount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Attach an existing Discount to a Campaign */
        post: operations["attachDiscountToCampaign"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/{id}/detach-discount": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Detach discount from Campaign */
        post: operations["detachDiscountFromCampaign"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/{id}/utm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Set UTM params for Campaign */
        put: operations["setCampaignUtm"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/campaigns/{id}/apply-url": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Preview campaign discount apply URL (UTM/shortlink) */
        get: operations["getCampaignApplyUrl"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/discounts/conflicts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Advisory scan for active automatic discounts (possible conflicts) */
        get: operations["getDiscountConflicts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports/overview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Overview KPIs */
        get: operations["getReportOverview"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports/attribution": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Revenue by discount code */
        get: operations["getReportAttribution"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports/campaigns": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Campaign attribution (revenue/orders via discount or UTM) */
        get: operations["getCampaignAttribution"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports/automations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Automation attribution (Abandoned Checkout revenue) */
        get: operations["getAutomationAttribution"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports/messaging/timeseries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Messaging daily timeseries (sent/delivered/failed/cost) */
        get: operations["getMessagingTimeseries"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks/shopify/{topic}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Shopify webhooks ingress (HMAC verified) */
        post: operations["shopifyWebhook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks/mitto/dlr": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mitto delivery receipts */
        post: operations["mittoDlr"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks/mitto/inbound": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Mitto inbound MO (STOP/UNSUB) */
        post: operations["mittoInbound"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/webhooks/gdpr/{topic}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Shopify GDPR webhooks (HMAC verified) */
        post: operations["gdprWebhook"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        HealthResponse: {
            /** @example ok */
            status?: string;
        };
        ConsentRequest: {
            /** @example +3069XXXXXXX */
            phone: string;
            /** @example user@example.com */
            email?: string;
            /**
             * @default SINGLE_OPT_IN
             * @enum {string}
             */
            optInLevel: "SINGLE_OPT_IN" | "CONFIRMED_OPT_IN";
        };
        ConsentResponse: {
            /** @example true */
            ok?: boolean;
            /** @example +3069XXXXXXX */
            phoneE164?: string;
            /** @example true */
            linkedToCustomer?: boolean;
            /** @example false */
            shopifyPushPending?: boolean;
            /** @example false */
            pcdApproved?: boolean;
        };
        DiscountCreateRequest: {
            /** @example WELCOME10 */
            code: string;
            title?: string;
            /** @enum {string} */
            kind: "percentage" | "amount";
            /** @example 10 */
            value: number;
            /** @example EUR */
            currencyCode?: string;
            /** Format: date-time */
            startsAt?: string;
            /** Format: date-time */
            endsAt?: string;
            /** @default true */
            appliesOncePerCustomer: boolean;
            usageLimit?: number;
            /** @example /checkout */
            redirect?: string;
            segments?: string[];
        };
        DiscountCreateResponse: {
            /** @example true */
            ok?: boolean;
            /** @example WELCOME10 */
            code?: string;
            title?: string;
            id?: string;
            /** Format: date-time */
            startsAt?: string;
            /** Format: date-time */
            endsAt?: string;
            /** @example https://shop.myshopify.com/discount/WELCOME10?redirect=%2Fcheckout */
            applyUrl?: string;
        };
        ApplyUrlResponse: {
            /** @example true */
            ok?: boolean;
            url?: string;
        };
        SettingsGetResponse: {
            /** @example true */
            ok?: boolean;
            /** @example sms-blossom-dev.myshopify.com */
            shop?: string;
            settings?: {
                /** @example Europe/Athens */
                timezone?: string;
                quietHours?: {
                    /** @example 21 */
                    start?: number;
                    /** @example 9 */
                    end?: number;
                };
                cap?: {
                    /** @example 24 */
                    windowHours?: number;
                    /** @example 1 */
                    maxPerWindow?: number;
                };
                abandoned?: {
                    /** @example 30 */
                    delayMinutes?: number;
                };
            };
        };
        SettingsPutRequest: {
            timezone?: string;
            quietHours?: {
                start: number;
                end: number;
            };
            cap?: {
                windowHours: number;
                maxPerWindow: number;
            };
            abandoned?: {
                delayMinutes?: number;
            };
        };
        ReportOverviewResponse: {
            ok?: boolean;
            /** @example 30d */
            range?: string;
            contacts?: {
                total?: number;
                optedIn?: number;
                optedOutRecent?: number;
            };
            messages?: {
                sent?: number;
                delivered?: number;
                failed?: number;
                /** Format: float */
                deliveryRate?: number;
            };
            revenue?: {
                /** Format: float */
                attributed?: number;
            };
        };
        ReportAttributionResponse: {
            ok?: boolean;
            range?: string;
            items?: {
                code?: string;
                orders?: number;
                /** Format: float */
                revenue?: number;
            }[];
        };
        AutomationRules: {
            quietHours?: {
                enabled?: boolean;
                start?: number;
                end?: number;
                zone?: string | null;
            };
            frequencyCap?: {
                enabled?: boolean;
                /** @enum {string} */
                per?: "hour" | "day" | "week";
                max?: number;
            };
            dedupeWindowMin?: number;
        };
        AutomationConfig: {
            enabled?: boolean;
            template?: string | null;
            delayMinutes?: number;
            rules?: components["schemas"]["AutomationRules"];
        };
        AutomationsResponse: {
            ok?: boolean;
            shop?: string;
            automations?: {
                orderPaid?: components["schemas"]["AutomationConfig"];
                abandoned?: components["schemas"]["AutomationConfig"];
                fulfillmentUpdate?: components["schemas"]["AutomationConfig"];
                welcome?: components["schemas"]["AutomationConfig"];
                backInStock?: components["schemas"]["AutomationConfig"];
            };
        };
        AutomationsUpdateRequest: {
            orderPaid?: components["schemas"]["AutomationConfig"];
            abandoned?: components["schemas"]["AutomationConfig"];
            fulfillmentUpdate?: components["schemas"]["AutomationConfig"];
            welcome?: components["schemas"]["AutomationConfig"];
            backInStock?: components["schemas"]["AutomationConfig"];
        };
        ErrorResponse: {
            error?: string;
            details?: unknown;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getHealth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthResponse"];
                };
            };
            /** @description Bad request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Service unavailable */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    collectConsent: {
        parameters: {
            query: {
                /** @description Shopify shop domain (added by App Proxy) */
                shop: string;
                /** @description App Proxy timestamp */
                timestamp: string;
                /** @description App Proxy HMAC */
                signature: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConsentRequest"];
            };
        };
        responses: {
            /** @description Consent accepted (Shopify push may be pending if PCD not approved) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConsentResponse"];
                };
            };
            /** @description Invalid App Proxy signature */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Invalid payload or phone format */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    publicUnsubscribe: {
        parameters: {
            query: {
                shop: string;
                timestamp: string;
                signature: string;
                phone: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Confirmation HTML */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/html": string;
                };
            };
            /** @description Invalid signature */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Missing params */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    registerBackInStockInterest: {
        parameters: {
            query: {
                shop: string;
                timestamp: string;
                signature: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    phone: string;
                    inventoryItemId: string;
                };
            };
        };
        responses: {
            /** @description Registered */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ok?: boolean;
                        id?: string;
                        productMeta?: Record<string, never> | null;
                    };
                };
            };
            /** @description Invalid signature */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description No consent for this contact */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unknown shop or contact */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Missing or invalid params */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createDiscount: {
        parameters: {
            query: {
                shop: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DiscountCreateRequest"];
            };
        };
        responses: {
            /** @description Discount created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DiscountCreateResponse"];
                };
            };
            /** @description Missing shop parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Code conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Invalid payload */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    buildApplyUrl: {
        parameters: {
            query: {
                shop: string;
                code: string;
                redirect?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description URL built */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApplyUrlResponse"];
                };
            };
            /** @description Missing required parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getSettings: {
        parameters: {
            query: {
                shop: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Settings payload */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsGetResponse"];
                };
            };
            /** @description Missing shop parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Shop not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    updateSettings: {
        parameters: {
            query: {
                shop: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SettingsPutRequest"];
            };
        };
        responses: {
            /** @description Updated settings */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingsGetResponse"];
                };
            };
            /** @description Missing shop parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Shop not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Invalid payload */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getAutomations: {
        parameters: {
            query: {
                shop: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Automations config */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AutomationsResponse"];
                };
            };
            /** @description Missing shop parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Shop not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    updateAutomations: {
        parameters: {
            query: {
                shop: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AutomationsUpdateRequest"];
            };
        };
        responses: {
            /** @description Updated automations config */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AutomationsResponse"];
                };
            };
            /** @description Missing shop parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Shop not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Invalid payload */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    createSegment: {
        parameters: {
            query: {
                shop: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    id?: string;
                    name: string;
                    filterJson: Record<string, never>;
                };
            };
        };
        responses: {
            /** @description Segment upserted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ok?: boolean;
                        segment?: Record<string, never>;
                    };
                };
            };
            /** @description Unknown shop */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Invalid payload */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    previewSegment: {
        parameters: {
            query: {
                shop: string;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    filterJson?: Record<string, never>;
                };
            };
        };
        responses: {
            /** @description Count and sample returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ok?: boolean;
                        count?: number;
                        sample?: Record<string, never>[];
                    };
                };
            };
            /** @description Unknown shop */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    snapshotCampaign: {
        parameters: {
            query: {
                shop: string;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Snapshot done */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ok?: boolean;
                        total?: number;
                        inserted?: number;
                    };
                };
            };
            /** @description Unknown shop or campaign */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    estimateCampaign: {
        parameters: {
            query: {
                shop: string;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Estimate returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ok?: boolean;
                        recipients?: number;
                        perMessageSegments?: number;
                        totalSegments?: number;
                        estCost?: number;
                    };
                };
            };
            /** @description Unknown shop or campaign */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    testSendCampaign: {
        parameters: {
            query: {
                shop: string;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    phone: string;
                };
            };
        };
        responses: {
            /** @description Test send result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ok?: boolean;
                        result?: Record<string, never>;
                    };
                };
            };
            /** @description Unknown shop, campaign, or contact */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Missing phone */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    sendCampaign: {
        parameters: {
            query: {
                shop: string;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Send summary */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ok?: boolean;
                        sent?: number;
                        failed?: number;
                        skipped?: number;
                    };
                };
            };
            /** @description Unknown shop or campaign */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    attachDiscountToCampaign: {
        parameters: {
            query: {
                shop: string;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    discountId?: string;
                    code?: string;
                };
            };
        };
        responses: {
            /** @description Attached */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ok?: boolean;
                        campaignId?: string;
                        discountId?: string;
                    };
                };
            };
            /** @description Unknown shop, campaign, or discount */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    detachDiscountFromCampaign: {
        parameters: {
            query: {
                shop: string;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Detached */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ok?: boolean;
                    };
                };
            };
            /** @description Unknown shop or campaign */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    setCampaignUtm: {
        parameters: {
            query: {
                shop: string;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: unknown;
                };
            };
        };
        responses: {
            /** @description Saved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ok?: boolean;
                        utm?: Record<string, never>;
                    };
                };
            };
            /** @description Unknown shop or campaign */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getCampaignApplyUrl: {
        parameters: {
            query: {
                shop: string;
                redirect?: string;
                short?: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description URL returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ok?: boolean;
                        url?: string;
                        short?: string | null;
                    };
                };
            };
            /** @description Unknown shop or campaign */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Campaign has no discount */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getDiscountConflicts: {
        parameters: {
            query: {
                shop: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Active automatic discounts returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ok?: boolean;
                        automaticDiscounts?: Record<string, never>[];
                    };
                };
            };
            /** @description Missing shop or unknown shop */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getReportOverview: {
        parameters: {
            query: {
                shop: string;
                range?: "7d" | "30d" | "90d";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Overview metrics */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReportOverviewResponse"];
                };
            };
            /** @description Missing shop parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Shop not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getReportAttribution: {
        parameters: {
            query: {
                shop: string;
                range?: "7d" | "30d" | "90d";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Attribution items */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReportAttributionResponse"];
                };
            };
            /** @description Missing shop parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Shop not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getCampaignAttribution: {
        parameters: {
            query: {
                shop: string;
                from?: string;
                to?: string;
                window?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Campaign attribution list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ok?: boolean;
                        range?: {
                            /** Format: date-time */
                            from?: string;
                            /** Format: date-time */
                            to?: string;
                        };
                        items?: {
                            campaignId?: string;
                            name?: string;
                            revenue?: number;
                            orders?: number;
                            via?: {
                                discount?: number;
                                utm?: number;
                            };
                            clicks_lifetime?: number;
                            messaging?: {
                                sent?: number;
                                delivered?: number;
                                failed?: number;
                            };
                        }[];
                    };
                };
            };
            /** @description Unknown shop */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getAutomationAttribution: {
        parameters: {
            query: {
                shop: string;
                from?: string;
                to?: string;
                window?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Automation attribution */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ok?: boolean;
                        range?: {
                            /** Format: date-time */
                            from?: string;
                            /** Format: date-time */
                            to?: string;
                        };
                        items?: {
                            automation?: string;
                            orders?: number;
                            revenue?: number;
                        }[];
                    };
                };
            };
            /** @description Unknown shop */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    getMessagingTimeseries: {
        parameters: {
            query: {
                shop: string;
                from?: string;
                to?: string;
                window?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Timeseries returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ok?: boolean;
                        range?: {
                            /** Format: date-time */
                            from?: string;
                            /** Format: date-time */
                            to?: string;
                        };
                        series?: {
                            /** Format: date-time */
                            day?: string;
                            sent?: number;
                            delivered?: number;
                            failed?: number;
                            cost?: number;
                        }[];
                    };
                };
            };
            /** @description Unknown shop */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    shopifyWebhook: {
        parameters: {
            query?: never;
            header?: {
                "X-Shopify-Topic"?: string;
                "X-Shopify-Hmac-Sha256"?: string;
                "X-Shopify-Shop-Domain"?: string;
            };
            path: {
                topic: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Accepted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid HMAC signature */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    mittoDlr: {
        parameters: {
            query: {
                mid: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Acknowledged */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Missing mid parameter */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    mittoInbound: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Acknowledged */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    gdprWebhook: {
        parameters: {
            query?: never;
            header?: {
                "X-Shopify-Hmac-Sha256"?: string;
                "X-Shopify-Shop-Domain"?: string;
            };
            path: {
                topic: "customers/data_request" | "customers/redact" | "shop/redact";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Acknowledged */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid HMAC signature */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
